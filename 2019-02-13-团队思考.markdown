## 技术架构

### 前台架构

#### 设计模式

MVC: 六个箭头， 唯独model不指向controller，保证model独立性。 缺点是controller总是很大。 最简单，开发快。
MVP: 通过中间层Presenter实现了Model和View的完全解耦。避免View和Controller分不清楚的问题。 Presenter依然会大 。主要是解偶。
MVVM: 绑定，适合包括展示和编辑的逻辑。开发较为复杂。适合逻辑复杂的场合。 view 和 model之间互相解欧

#### 复杂业务逻辑

对于复杂的业务逻辑，适合采用RAC的架构。RAC包括如下:

- 动态绑定，适合MVVM的场景。
- 链式调用，提高代码可读性。
- 响应式编程思想, 针对KVO等等，简化业务逻辑,使代码可读性好。
- 函数式编程思想, 简化业务逻辑，尤其是多个业务流程依赖，流程判断

#### 中台架构，提高开发质量，开发效率

##### APM/性能监控和优化
##### 混合/web化

###### 首屏优化

###### 小程序

##### 动态化/热修复
##### 安全

传输安全，数据安全，App metadata安全。

##### 持续集成/交付

#### 后台架构

##### 网络层

##### 数据持久化



## 需求评审

沟通关键在于会前沟通，确定各种方案的实现难度，风险点。

## 任务时长评估

任务拆解，风险预期。同时结合安卓同事的评估。业务和技术7:3的比例。

## 持续交付/代码管理

git-flow，多人协作, 分支管理。
issue-track， 问题定位。
持续集成/持续交付平台。

互联网公司的级别没有意义，举个例子，曾哥


## 管理

我离开后，我带的同事也离职了。

对于团队新人:
1.先要服人，比如技术更有经验，工作习惯/流程上更有经验，比其更努力，让其明白为什么我可以领导其。举个例子，某某研究生学历。这样虽然我不能给他加薪，但是因为工作中能学到东西，他会更积极地工作。
2.工作需求评估，因为自身对业务非常了解，对开发流程，潜在的风险，可能出现的问题都非常了解，所以能够合理安排工作，工作量和工作内容，避免出现工作量分配不合理，或者出现超预期的情况导致工作无法完成。比如某个需求实现需要依赖外部团队，或者该需求的实现逻辑上比较复杂，后续可能出现什么问题。
3.团队产出的质量把控，包括code review，git-flow流程把控，commit和分支开发，issue和PR。code-review是选择性的review。
4.对于同事的评价，开发同事包括四种。对应的是发现问题的能力(眼界)和解决问题的能力(实力)
5.金融产品最重要还是风控，对应到开发上就是开发质量要高。不能没事就crash。
