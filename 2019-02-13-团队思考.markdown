## 技术架构

### 前台架构

#### 设计模式

MVC: 六个箭头， 唯独model不指向controller，保证model独立性。 缺点是controller总是很大。 最简单，开发快。
MVP: 通过中间层Presenter实现了Model和View的完全解耦。避免View和Controller分不清楚的问题。 Presenter依然会大 。主要是解偶。
MVVM: 绑定，适合包括展示和编辑的逻辑。开发较为复杂。适合逻辑复杂的场合。 view 和 model之间互相解欧

#### 复杂业务逻辑

对于复杂的业务逻辑，适合采用RAC的架构。RAC包括如下:

- 动态绑定，适合MVVM的场景。
- 链式调用，提高代码可读性。
- 响应式编程思想, 针对KVO等等，简化业务逻辑,使代码可读性好。
- 函数式编程思想, 简化业务逻辑，尤其是多个业务流程依赖，流程判断

#### 中台架构，提高开发质量，开发效率

##### APM/性能监控和优化
##### 混合/web化

###### 首屏优化

###### 小程序

##### 动态化/热修复
##### 安全

传输安全，数据安全，App metadata安全。

##### 持续集成/交付

#### 后台架构

##### 网络层

##### 数据持久化



## 需求评审

沟通关键在于会前沟通，确定各种方案的实现难度，风险点。

## 任务时长评估

任务拆解，风险预期。同时结合安卓同事的评估。业务和技术7:3的比例。

## 持续交付/代码管理

git-flow，多人协作, 分支管理。
issue-track， 问题定位。
持续集成/持续交付平台。

互联网公司的级别没有意义，举个例子，曾哥


## 管理


一、利用工具提高团队的效率。包括code review，git-flow流程把控，commit和分支开发，issue和PR。code-review是选择性的review。这个是大团队的管理。

二、管外包跟带应届生不一样。应届生主要是教学和激励，外包主要是把工作细化到每一天每一点。一步步地推进。

三、曾经我是个人贡献者，随和，产品怎么说就帮其实现。负责项目以后就不能这样，必须从实现的角度跟产品和设计进行磨合，帮助他们完成他们的目标。金融产品经理和互联网2c产品经理很不一样，金融产品经理的金融知识更专业，但是不擅长梳理产品逻辑，不擅长做产品细节的规划。这个空缺必须要有人来填补，一般是开发来填补。体现在需求评审的时候，就是帮助其完善逻辑，确定细节。

四、曾经我非常追求细节，追求极致用户体验。花了一个月的业余时间去优化流畅度。但金融应该追求极致的成本机会风险收益比。做一个功能或者功能里面的一个细节处理。要考虑重点投入的能否创造市场接受的亮点。如果出了问题公司需要付出多少代价。2b和2c开发有个区别就是更注重风险。2b用户更为敏感。以理财通为例。

对自己有什么期待，对行业发展有什么看法。团队人数组成，是否盈利。
