## 技术架构

### 前台架构

#### 设计模式

MVC: 六个箭头， 唯独model不指向controller，保证model独立性。 缺点是controller总是很大。 最简单，开发快。
MVP: 通过中间层Presenter实现了Model和View的完全解耦。避免View和Controller分不清楚的问题。 Presenter依然会大 。主要是解偶。
MVVM: 绑定，适合包括展示和编辑的逻辑。开发较为复杂。适合逻辑复杂的场合。 view 和 model之间互相解欧

#### 复杂业务逻辑

对于复杂的业务逻辑，适合采用RAC的架构。RAC包括如下:

- 动态绑定，适合MVVM的场景。
- 链式调用，提高代码可读性。
- 响应式编程思想, 针对KVO等等，简化业务逻辑,使代码可读性好。
- 函数式编程思想, 简化业务逻辑，尤其是多个业务流程依赖，流程判断

#### 中台架构，提高开发质量，开发效率

##### APM/性能监控和优化
##### 混合/web化
##### 动态化/热修复
##### 安全

传输安全，数据安全，App metadata安全。

##### 持续集成/交付

#### 后台架构

##### 网络层

##### 数据持久化



## 需求评审

沟通关键在于会前沟通，确定各种方案的实现难度，风险点。

## 任务时长评估

任务拆解，风险预期。同时结合安卓同事的评估。业务和技术7:3的比例。

## 持续交付/代码管理

git-flow，多人协作, 分支管理。
issue-track， 问题定位。
持续集成/持续交付平台。


## 离职和经验

1.不是一个喜新厌旧的人
2.在国信成长很多，价值观更适合金融公司。
3.因为除了开车，必须要知道造车。所以来了腾讯，深入学习技术，前沿技术。 同时一年也达到预期，有前沿技术产出，已经具备造发动机的能力。
4.腾讯的企业文化不及预期。不甘于做不思进取的螺丝钉，容易荒废，喜欢实际，落地，进取的企业文化。(在国信能推着项目走。在国信有想法能把它落地。还是个开车的。开发同事有两种，有的较为自大，技术水平很一般但是推不动，缺少狼性。腾讯人际关系较为淡薄，推进起来阻力重重)。腾讯有两种开发，一种专而深，一种专而浅。券商一般都是博而浅，我是做博而在某一个方面和很深的。
5.一种专而深，一种专而浅。券商一般都是博而浅，我希望我是博而深
6.道义上没有对不起腾讯的地方，因为HR。


在国信有项目推动的经验，iOS进度快于安卓，推动的关键一个是沟通协调，预先想到可能存在的细节和问题以及风险点，另一个是开发时注重质量，注重代码的可维护性，二八原则。
有项目和工作流程优化经验， gitlab,git-flow和持续集成持续交付。对比招商证券花了50w在上面。
code-review和团队管理很熟悉。
对金融和互联网都非常熟悉。既掌握了前沿互联网技术尤其是中台技术，又有互联网金融开发团队管理和优化的经验。对金融业务非常熟悉。

跟互联网出身的人相比，更熟悉金融业务(跟互联网2c业务非常不一样，很容易弄错，比如单位净值和累计净值)，同时更适应金融公司文化，强调独立解决问题，独立做出方案。
对比金融出身的人，更熟悉技术前沿，(这几年技术最大的进步)互联网中台技术的各种进展，以及实战效果，比如flutter。rn。APM等等，擅长提高开发效率和开发质量。
